import Paragraph from '@/ui/Paragraph'; // import your Paragraph component
import { useEffect, useState } from "react";
import axios from 'axios';
import { useRoomContext } from "@/contexts/RoomContext";
import { useUserContext } from "@/contexts/UserContext";
import JoinRoomButton from "./JoinRoomButton";
import LeaveRoomButton from "./LeaveRoomButton";
import Button from '../ui/Button';
import Modal from 'react-modal';
import RoomCreation from './RoomCreation';
import { toast } from '@/ui/Toast';
import { RoomType } from '@/types';

type RoomListProps = {
	className?: string;
};

const RoomList: React.FC<RoomListProps> = ({ className }) => {
	const [joinedRooms, setJoinedRooms] = useState<RoomType[]>([]);
	const [availableRooms, setAvailableRooms] = useState<RoomType[]>([]);
	const { activeRoom, isUpdated, changeRoom, newMessage } = useRoomContext();
	const { user } = useUserContext();
	const [modalIsOpen, setModalIsOpen] = useState(false);
	const [isHovered, setIsHovered] = useState(false);
	const [availableRoomIconPaths, setAvailableRoomIconPaths] = useState<string[]>([]);
	const [joinedRoomIconPaths, setJoinedRoomIconPaths] = useState<string[]>([]);
    const [clickedRoomName, setClickedRoomName] = useState('');


	useEffect(() => {
		if (typeof window !== 'undefined' && window.document) {
			Modal.setAppElement('#__next'); // `#__next` is the default id for the root div generated by Next.js
		}
	}, []);

	const handleCloseModal = () => {
		setModalIsOpen(false);
	}

	const openModal = () => {
		setModalIsOpen(true);
	};
	const handleMouseEnter = () => {
		setIsHovered(true);
	  };
	
	  const handleMouseLeave = () => {
		setIsHovered(false);
	  };


	const getRooms = async () => {
		try {
			const rooms = await axios.get(`/api/rooms`);

			interface UserStatusMap {
				joinedRooms: typeof rooms.data[];
				availableRooms: typeof rooms.data[];
			}

			const userStatusMap = rooms.data.reduce((acc: UserStatusMap, room: any) => {
				const userStatus = room.users[user.login];
				if (userStatus)
					acc.joinedRooms.push(room);
				else
					acc.availableRooms.push(room);
				return acc;
			}, { joinedRooms: [], availableRooms: [] } as UserStatusMap);

			setJoinedRooms(userStatusMap.joinedRooms);
			setAvailableRooms(userStatusMap.availableRooms);
		} catch (error: any) {
			toast({
				title: "Error.",
				message: error,
				type: "error"
			})
		}
	}   

	useEffect(() => {
		getRooms();
	}, [isUpdated]);

	useEffect(() => {
		const isActiveRoomInJoinedRooms = joinedRooms.some(room => room.name === activeRoom);
		
		if (!isActiveRoomInJoinedRooms) {
			setClickedRoomName('');
		}
	}, [activeRoom, joinedRooms, setClickedRoomName]);

	const getIconPath = (roomType: string) => {
		if (roomType === "public") return "/Public.svg";
		if (roomType === "private") return "/Private.svg";
		if (roomType === "protected") return "/Protected.svg";
		return null;
	};

	useEffect(() => {
		const updatedAvailableIconPaths = availableRooms.map(room => getIconPath(room.type) || "");
		setAvailableRoomIconPaths(updatedAvailableIconPaths);
	
		const updatedJoinedIconPaths = joinedRooms.map(room => getIconPath(room.type) || "");
		setJoinedRoomIconPaths(updatedJoinedIconPaths);
	  }, [availableRooms, joinedRooms]);
	
	const checkChangeRoom = (roomName: string) => {
		if (roomName !== activeRoom) {
			setClickedRoomName(roomName);
			changeRoom(roomName)
		}
	}

	return (
		<div className={`Room-comp ${className}`}>
			<div className="inner-container" style={{ overflowY: 'auto' }}>
				<Paragraph neon="blue">JOINED ROOMS</Paragraph>
				<div className="list-container w-full pr-2" style={{ paddingTop: '10px', marginBottom: '10px' }}>
					{[...joinedRooms, ...Array(Math.max(0, 5 - joinedRooms.length)).fill(null)].map((room: any, index: number) => (
						<div key={index} className="list-item w-full px-2 py-4">
							{room && 
							<div className={`${(newMessage[room.name] && activeRoom !== room.name) && 'notif-test'} ${clickedRoomName === room.name ? 'notif-test2' : ''}  list-item-left shrink-1 overflow-x-hidden`}>
							
									<>
										<img className={`room-icon`} src={joinedRoomIconPaths[index] ?? undefined} alt="Room Icon"/>
										<button onClick={() => checkChangeRoom(room.name)}>
											<Paragraph displayFlex={false} size="small" className={`${(newMessage[room.name] && activeRoom !== room.name) && 'filter2'}  ${clickedRoomName === room.name ? 'filter3' : ''}    w-full text-ellipsis overflow-hidden whitespace-nowrap`}>{room.name}</Paragraph>
										</button>
									</>
								
							</div>}
							<div className="list-item-right shrink-0">
								{room && <LeaveRoomButton roomName={room.name} />}
							</div>
						</div>
					))}
				</div>

				<Paragraph neon="blue">AVAILABLE ROOMS</Paragraph>
				<div className="list-container w-full pr-2" style={{ paddingTop: '10px' }}>
					{[...availableRooms, ...Array(Math.max(0, 5 - availableRooms.length)).fill(null)].map((room: any, index: number) => (
						<div key={index} className="list-item w-full px-2 py-4">
							<div className="list-item-left shrink-1 overflow-x-hidden">
								{room ? (
									<>
										<img src={availableRoomIconPaths[index] ?? undefined} alt="Room Icon" className="room-icon" />
										<Paragraph displayFlex={false} size="small" className='w-full text-ellipsis overflow-hidden whitespace-nowrap'>{room.name}</Paragraph>
									</>
								) : (
									<Paragraph displayFlex={false} size="small" className='w-full text-ellipsis overflow-hidden whitespace-nowrap'></Paragraph>
								)}
							</div>
							<div className="list-item-right shrink-0">
								{room && <JoinRoomButton room={room} />}
							</div>
						</div>
					))}
				</div>
			</div>
			<Button onClick={openModal} className='create-room'>CREATE ROOM</Button>

		{modalIsOpen && (
						<div className='modal'>
						<div className='modal-content p-4 gap-10 relative text-center'>
						<button 
							onClick={handleCloseModal}
							style={{
								position: 'absolute',
								top: '10px', 
								left: '10px', 
								color: 'white', 
								background: 'none', 
								border: 'none',
								fontSize: '1rem',
								cursor: 'pointer',
								filter: isHovered ? 'drop-shadow(0px 0px 10px #F0F)' : 'none'  
							}}
							onMouseEnter={handleMouseEnter}
							onMouseLeave={handleMouseLeave}
							>
							<img className="h-[20px] w-[20px] invert-[1]" src="/cross-icone.svg" alt="Close" />
							</button>
							<p className='font'>CREATE ROOM</p>
							<RoomCreation onClose={handleCloseModal}/>

						</div>
						</div>
		)}
			
		</div>
	);
};

export default RoomList;